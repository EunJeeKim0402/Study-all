* 어노테이션 기능과 역할(Controller, RequestMapping, Autowired 등...)
어노테이션 : 다른 프로그램에게 유용한 정보를 제공하기위해 사용되는 주석과 같은 의미. 컴파일러에게 문법 에러를 체크하도록 정보 제공, 프로그램을 빌드할 때 코드를 자동으로 생성할 수 있도록 정보 제공, 런타임에 특정 기능을 실행하도록 정보 제공
@Controller : spring mvc프레임워크에서 사용되며 해당 클래스가 컨트롤러 역할을 한다는것을 나타냄. 컨트롤러는 사용자의 요청을 처리하고 그에 맞는 모델을 준비하여 뷰에 전달하는 역할을 함
@RestController : 데이터를 반환하는 컨트롤러에 적합. @Controller의 기능을 확장한 형태로, 메소드가 반환하는 값을 자동으로 json또는 xml형식으로 변환해서 클라이언트에 응답. 즉, 뷰를 반환하지 않고 직접 데이터를 반환하게 됨.
@Autowired : spring 의존성주입을 자동으로 처리해줌. 해당 bean을 스프링 컨테이너에서 찾아 자동으로 주입함. 
 ** 스프링 컨테이너 : 스프링 프레임워크의 핵심 컴포넌트. 자바 객체의 생명주기를 관리하며 자바 객체들에게 추가적인 기능을 제공(자바 객체를 빈이라고 함). ApplicationContext에서 BeanFactory의 기능을 상속받아서 제공하게 됨. 
 ** 의존성주입 : 두 객체간의 관계를 맺어주는것을 의존성 주입이라고함. 강하게 결합된 클래스들을 분리하고 결합도를 낮추고 유연성을 확보.
 ** 스프링 컨테이너에 빈으로 등록되는 과정 : @Component, @Service, @Controller, @Bean 등이 빈으로 등록됨(컴포넌트 스캔에 의해 자동으로 스프링 컨테이너에 등록됨) 
@GetMapping : http get요청을 처리. 쿼리 파라미터 또는 경로 변수에 데이터 전달
@PostMapping : http post요청을 처리. http 본문(body)에 데이터 전달. 보안에 좀 더 강함
@RequestMapping : http 요청의 url을 매핑하는데 사용되는 어노테이션. 주로 메소드에 적용되며 특정 url패턴에 맞는 요청을 해당 메소드에서 처리하게 함(get/post모두 사용 가능)
@RequestBody: HTTP 요청 본문(JSON, XML 등)을 객체로 변환.
@ResponseBody: 메서드 반환 값을 HTTP 응답 본문에 담음(JSON 또는 XML 등...)
public @ResponseBody AjaxResult updateMovieInfo : 메소드 반환값을(AjaxResult) http 응답 본문에 담아서 반환한다는 뜻
throws IOException : 입출력 작업에서 문제가 발생했을 때 발생. 호출한쪽에서 예외를 처리하도록 위임
List<Map<String, Object>> movieList = new ArrayList<>(); : 인터페이스와 구현체를 활용한 객체선언 방식. 유연성, 다형성 상승


DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
 -> DocumentBuilderFactory는 xml 데이터를 읽고 DOM트리(Document Object Model)를 생성할수있는 객체를 생성하는 팩토리클래스
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
 -> 위의 팩토리를 사용해 DocumentBuilder객체를 생성. 이건 xml문서를 실제로 파싱하는 역할을 담당함
Document doc = dBuilder.parse(url);
 -> DocumentBuilder객체를 사용히 url에서 xml데이터를 읽어들임. 이데이터를 DOM형태로 변환해 doc객체에 저장. Document는 DOM api에서 사용되는 인터페이스로, xml또는 html문서의 전체 구조를 메모리 내에 계층적으로 표현한 객체. 이걸로 xml/html문서를 읽고 수정 탐색 가능
doc.getDocumentElement().normalize();
 -> xml문서를 정규화함(정규화란 DOM트리의 구조를 정리하거나 속성과 요소 노드를 표준화하는 작업. 예를들어 공백제거, 텍스트노드를 결합해 데이터를 일관적으로 만듬)
HttpURLConnection conn = (HttpURLConnection) apiUrl.openConnection();
 -> apiUrl을 사용해 서버에 연결을 설정함. 즉, 서버와 http연결을 열어 데이터를 전송하거나 받기위한 준비를함
conn.setRequestMethod("GET");
 -> http 요청 메소드를 get으로 설정
conn.setRequestProperty("Content-Type", "application/xml");
 -> http요청 헤더의 content-type설정. 요청과 응답 데이터가 xml형식임을 나타냄
BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
 -> conn.getInputStream()으로 서버의 응답데이터를 읽어오는 스트림 반환. inpustreamReader로 바이트데이터를 문자데이터로 변환. BufferedReader는 이 데이터를 한줄씩 읽기 쉽게 만들어줌
while ((inputLine = in.readLine()) != null) { response.append(inputLine); }
 -> in.readLine()으로 서버 응답 데이터를 한줄씩 읽어옴. 읽은 데이터가 null이 아닐때 response에 추가
NodeList movieListResultNodeList = doc.getElementsByTagName("movieListResult");
 -> xml문서(doc)에서 movieListsResult라는 태그를 가진 모든 요소를 찾아 NodeList로 반환
 ** NodeList : DOM노드집합. 읽기전용. DOM조작 및 XML/HTML 처리 목적
Node nNode = movieListNodeList.item(i);
 -> nodeList에서 i번째 노드 가져옴
Element eElement = (Element) nNode;
 -> nNode를 Element타입으로 캐스팅
 ** Element는 xml요소를 보다 구체적으로 다룰 수 있는 인터페이스. DOM에서는 모든 노드가 Node타입으로 반환되는데, 태그 노드를 조작하려면 Element로 변환해야됨
StringBuilder : 변할수있는 문자열을 다루는 클래스. 즉, 기존 객체 내용 수정 가능(String은 불변이라 수정할때 새로운 객체가 생성되는 시스템)


Model : view에 데이터를 전달하는데 사용됨. 내부적으로 map형태로 저장
HttpServletRequest : http요청의 모든 정보를 담고있는 객체. 파라미터, http 헤더값, 세션정보 등을 얻을 수 있음
@AuthenticationPrincipal : 스프링 시큐리티에서 현재 인증된 사용자 정보를 가져올 때 사용. SecurityContext에서 현재 로그인된 사용자 객체를 직접 주입받을 수 있음.


[[ com.fasterxml.jackson ]]
JSON 데이터를 Java 객체로 변환하거나, 그 반대로 변환할 수 있는 Jackson 라이브러리
ObjectMapper 클래스가 JSON과 Java 객체 간의 변환을 담당

- ObjectMapper
ObjectMapper mapper = new ObjectMapper(); // ObjectMapper 인스턴스 생성
Map<String, Object> responseMap = mapper.readValue(sb.toString(), Map.class);  // JSON 문자열을 Map으로 변환
String jsonString = mapper.writeValueAsString(obj); // Java 객체를 JSON 문자열로 변환

- JsonNode
JSON 구조에서 데이터를 쉽게 접근할 수 있도록 도와줌. 예를들어 JSON트리구조에서 특정값 추출할 때 사용
JsonNode rootNode = mapper.readTree("{\"name\":\"John\", \"age\":30}"); // JSON 문자열을 JsonNode로 파싱
String name = rootNode.get("name").asText(); 

[[ javax.xml.parsers ]]
XML 문서를 파싱하고 처리하는 Java 라이브러리. XML 문서의 구조를 트리 형태로 다루는 DOM API를 사용
import javax.xml.parsers.DocumentBuilderFactory;  // XML 파싱을 위한 팩토리 클래스
import javax.xml.parsers.DocumentBuilder;  // XML 문서 파싱 클래스
import org.w3c.dom.Document;  // DOM 트리 구조를 다루는 클래스
import org.w3c.dom.Element;  // XML 요소를 다루는 클래스
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();  // 팩토리 인스턴스 생성
factory.setNamespaceAware(true);  // 네임스페이스 인식 설정(XML의 태그명)
DocumentBuilder builder = factory.newDocumentBuilder();
String xmlString = "<person><name>John</name><age>30</age></person>";
Document doc = builder.parse(new InputSource(new StringReader(xmlString))); // XML 문자열 파싱하여 Document 객체로 변환
Element rootElement = doc.getDocumentElement(); // 루트 엘리먼트 추출(여기서는 person)


Keytool: Keytool은 Java에서 제공하는 도구로, 키 쌍(공개키와 개인키)과 인증서를 생성, 관리, 저장하는 데 사용됨
* 인증서를 발급받는 곳은 CA (Certificate Authority)
Keystore : Keystore는 키 쌍과 인증서를 저장하는 파일. Java에서 인증서를 관리하기 위한 표준 형식
인증서: 인증서는 특정 키 쌍의 소유자가 맞는지 확인하기 위해 제3자가 서명한 디지털 서명
IIS (Internet Information Services) : IIS는 Microsoft에서 제공하는 웹 서버로, 웹 사이트와 웹 애플리케이션을 호스팅하는 데 사용

