* HIPO차트(Hierachy Input Process Output)
    하향식 소프트웨어 개발을 위한 문서화 도구.
    시스템의 분석 및 설계나 문서화할 때 사용되는 기법으로, 시스템 실행 과정인 입력/처리/출력 기능을 나타냄.
    체계적 문서 관리 가능.
    변경, 유지보수 가능.
    가시적도표, 총체적도표, 세부적도표가 있음.

* 사용자 인터페이스 종류
    CLI(Command line interface) : 명력/출력이 텍스트로 이루어진 인터페이스
    GUI(Graphical user interface) : 아이콘이나 메뉴를 마우스로 선택해서 작업하는 그래픽 환경 인터페이스
    NUI(Natural user interface) : 사용자의 말이나 행동으로 기기를 조작
    VUI(Voice user interface) : 사람의 음성으로 기기를 조작
    OUI(Organic user interface) : 모든 사물과 사용자간의 상호작용을 위한 인터페이스

* 자료흐름도(DFD, data flow diagram)
    시스템 구성요소인 프로세스와 프로세스 간 데이터 흐름을 표현하는 주요도구

* 정형 기술 검토(FTR: Formal Technical Review)
    가장 일반적인 검토 방법. 소프트웨어 기술자들에 의해 수행되는 소프트웨어 품질 보증 활동
    검토회의, 검열 등이 있으며 모두 회의형태. 제품의 검토에만 집중/의제 제한/논쟁,반박 제한/문제영역 명확/참가자 수 제한/체크리스트

* Reverse Engineering : 기존 소프트웨어를 분석해서 소프트웨어 개발 과정이나 데이터처리 과정을 설명하는 분석 및 설계 정보를
                        재발견하거나 다시 만들어내는 활동
  Restructuring : 기존 소프트어 구조를 향상시키기위해 코드를 재구성. 소프트웨어 기능/외적 동작은 바뀌지 않음.						

* ISO/IEC 25010에서 제시한 소프트웨어의 품질 특성
 - 기능적합성 : 기능완전성, 기능정확성, 기능적절성
 - 성능효율성 : 시간효율성, 자원효율성, 사양
 - 호환성 : 공존성, 상호운영성
 - 사용성 : 적절 인지정도, 학습성, 조작성, 사용자 오류방지, UI미학, 접근성
 - 신뢰성 : 성숙성, 사용가능성, 결합허용성, 복구성
 - 보안성 : 기밀성, 무결성, 부인방지, 책임추적성, 인증성
 - 유지보수성 : 모듈성, 재사용성, 분석성, 변경성, 시험성
 - 이식성 : 적응성, 설치성, 대체성

* 인터페이스 구현 검증도구
 - xUnit : 자바, c++, .net, http 등 다양한 언어를 지원하는 단위 테스트 프레임워크
- STAF : 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크
- FitNesse : 웹 기반 테스트케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크
- NTAF : FitNesse의 장점인 협업기능과 STAF의 장점인 재사용 및 확장성을 통합한 NHN(Naver)의 테스트 자동화 프레임워크
- Selenium : 다양한 브라우저 및 개발 언어를 지원하는 웹 애플리에키션 테스트 프레임워크
- watir : Ruby를 사용하는 애플리케이션 테스트 프레임워크
* Foxbase? : dBASE용 컴파일러 패키지 상품명. 인터페이스 구현 검증도구는 아님

* 정적 분석 도구 : pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura
  동적 분석 도구 : Avalanche, Valgrind

* 데크(Deque) : 삽입과 삭제가 리스트의 양쪽 끝에서 발생.
                입력이 한쪽에서만 발생하고 출력은 양쪽에서 일어날 수 있는 입력제한과,
				입력은 양쪽에서 일어나고 출력은 한곳에서만 이루어지는 출력 제한이 있음.
  스택(Stack) : 리스트의 한쪽 끝으로만 삽입/삭제가 이루어지는 자료구조
  큐(Queue) : 리스트의 한쪽에서는 삽입, 다른 한쪽에서는 삭제가 이루어지는 자료구조

* 알파 검사 : 검증 검사 기법 중 개발자 장소에서 사용자가 개발자 앞에서 행하는 기법. 일반적으로 통제된 환경.
  베타 테스트 : 선정된 최종 사용자가 여러명의 사용자 앞에서 행하는 테스트기법(필드 테스팅). 개발자에 의해 제어되지 않음. 개발자에게 주기적 보고.

* 알고리즘 시간복잡도
 - O(1) : 입력값(n)에 관계 없이 일정하게 문제 해결에 하나의 단계만을 거침
 - O(log2n) : 문제 해결에 필요한 단계가 입력값(n) 또는 조건에 의해 감소
 - O(n) : 문제 해결에 필요한 단계가 입력값(n)과 1:1 관계를 가짐
 - O(nlog2n) : 문제 해결에 필요한 단계가 n(log2n)번만큼 수행됨
 - O(n2) : 문제 해결에 필요한 단계가 입력값(n)의 제곱만큼 수행됨
 - O(2n) : 문제 해결에 필요한 단계가 2의 입력값(n) 제곱만큼 수행됨

* 디지털 저작권 관리(DRM)의 기술 요소
 - 암호화, 키관리, 암호화 파일 생성, 식별기술, 저작권 표현, 정책 관리, 크랙 방지, 인증

* DML(Data Manipulation Language) 데이터 조작어 : SELECT, INSERT, UPDATE, DELETE
  DDL(Data Definition Language) 데이터 정의어 : CREATE, ALTER, DROP, RENAME, TRUNCATE
  DCL(Data Control Language) 데이터 제어어 : GRANT, REVOKE
  TCL(Transaction Control Language) 트랙잭션 제어어 : COMMIT, ROLLBACK, SAVEPOINT

* 데이터베이스의 트랜잭션 성질
 - Consistency 일관성 : 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성있는 DB상태로 변환.
                                 시스템이 가지고 있는 고정 요소는 트랜잭션 수행전/완료 후 상태가 같아야됨
 - Atomicity 원자성 : 트랜잭션의 연산은 DB에 모두 반영되도록 완료되든지 아니면 Rollback되어야함
 - Isolation 독립성,격리성,순차성 : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 다른 트랜잭션의 연산이 끼어들 수 없음
 - Durability 영속성,지속성 : 성공적으로 완료된 트랜잭션 결과는 시스템이 고장나더라도 영구 반영되어야함

* 트랜잭션의 상태
 - Active 활동 : 트랜잭션이 실행중
 - Failed 실패 : 트랜잭션 실행에 오류가 발생하여 중단됨
 - Aborted 철회 : 트랜잭션이 비정상적으로 종료되어 롤백 연산을 수행했음
 - Patially Committed 부분 완료 : 트랜잭션을 모두 성공실행하고 commit 실행되기 직전
 - Committed 완료 : 트랜잭션을 모두 성공 실행하고 commit 연산을 실행한 후의 상태

* 로킹 기법(Locking) : DB병행제어를 위해 트랜잭션이 접근하고자하는 데이터를 잠그는 병행제어 기법.
* 2단계 로킹규약 : 새로운 Lock은 수행할 수 없지만 Unlock은 수행할 수 없는 확장단계와
                          새로운 Unlock은 수행할 수 있지만 Lock은 수행할 수 없는 축소단계가 있음
                          직렬성을 보장하는 장점은 있으나 교착상태를 예방할 수 없다는 단점이 있음

* 키의 개념 및 종류
 - 슈퍼키(Super key) : 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키. 유일성은 만족하지만 최소성은 만족하지못함
 - 후보키(Candidate key) : 릴레이션을 구성하는 속성들 중 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합. 유일성,최소성 모두 만족
 - 기본키(Primary key) : 후보키 중 특별히 선정된 키로 중복값, nul값을 가질 수 없음
 - 대체키(Alternte key) : 후보키 중 선정된 기본키를 제외한 나머지 후보키를 의미
 - 외래키(Foreign key) : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미. 릴레이션간의 관계를 표현할 때 사용

* 관계해석(Relational Calculus) : 관계 DB모델 제안자인 '코드'가 수학의 술어해석에 기반을 두고 관계 데이터베이스를 위해 제안함
                                             관계 데이터의 연산을 표현하는 방법으로, 원하는 정보를 정의할 때는 계산 수식을 사용함
                                             원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성. 튜플 관계해석과 도메인 관계해석이 있음
                                             관계해석과 관계대수는 관계DB를 처리하는 기능과 능력면에서 동등, 관계대수로 표현한 식은 관계해석으로 표현 가능

* 분산데이터베이스 : 논리적으로는 같은 시스템에 속하지만 물리적으로는 컴퓨터 네트워크를 통해 분산되어있는 DB
 - 위치 투명성 : 접근하려는 DB의 실제 위치를 알 필요 없이 단지 DB논리적인 명칭만으로 접근 가능
 - 중복 투명성 : 동일 데이터가 여러곳에 중복되어있어도 사용자는 하나의 데이터만 존재하는 것처럼 사용 가능
 - 병행 투명성 : 분산DB와 관련된 다수 트랜잭션이 동시에 실행되어도 그 트랜잭션들의 수행결과는 서로 영향X
 - 장애 투명성 : 트랜잭션, DBMS, 네트워크, 컴퓨터 장애에도 불구하고 트랜잭션은 정확하게 수행됨

* 시스템 카탈로그 : 시스템 그 자체에 관련이 있는 다양한 객체 정보를 포함하는 시스템 데이터베이스
                          데이터 사전이라고도 함. 시스템 카탈로그에 저장된 정보를 메타데이터라고 함. SQL검색 가능.
                          카탈로그는 DBMS가 스스로 유지/생성. 삽입/삭제/업뎃 불가. 검색은 가능.

* 리눅스 명령어
 - cat : 파일 내용을 화면에 표시
 - chdir : 현재 사용할 디렉터리 위치 변경
 - chmod : 파일의 보호모드를 설정해서 파일 사용 허가 지정
 - chown : 소유자 변경
 - cp : 파일 복사
 - exec : 새로운 프로세스 수행
 - find : 파일을 찾음
 - fork : 새로운 프로세스 생성(하위 프로세스 호출, 프로세스 복제 명령)
 - fsck : 파일 시스템 검사/보수
 - getipd : 자신의 프로세스 아이디를 얻음
 - getppid : 부모 프로세스 아이디를 얻음
 - ls : 현재 디렉토리 내 파일 목록 확인
 - mount/umount : 파일 시스템 마운팅/마운팅 해제
 - rm : 파일 삭제
 - wait : fork 후 exec에 의해 실행되는 프로세스의 상위 프로세스가 하위 프로세스 종료 등의 이벤트를 기다림
 - uname : 시스템의 이름과 버전, 네트워크 호스트명 등의 시스템 정보 표시

* 배치 전략
 - 최초 적합(First-Fit) : 빈 영역 중에서 첫번째 분할 영역에 배치
 - 최적 적합(Best-Fit) : 빈 영역 중에서 단편화를 가장 작게 남기는 분할 영역에 배치
 - 최악 적합(Worst-Fit) : 빈 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치
 ** ex) 빈 기억 공간이 20K, 40K, 8K일때 기억장치 배치 전략으로 Worst-Fit을 사용해서 17K프로그램 적재 시 내부단편화의 크기는 40K - 17K = 23K

* 자동 반복 요청(ARQ : Automatic Repeat reQuest) 오류 제어에 사용됨
 - 정지-대기(Stop-and-Wait) ARQ : 오류가 발생한 경우 앞서 송신했던 블록만 재전송
 - Go-Back-N ARQ : 오류가 발생한 부분부터 모두 재전송해서 중복 전송 가능성
 - Selectiv-Repeat(선택적 재전송) ARQ : 여러 블록을 연속적으로 전송, 수신에서 부정응답 보내면 오류가 발생한 블록만을 재전송
 - 적응적(Adaptiv) ARQ : 전송효율 최대. 데이터블록 길이를 채널의 상태에 따라 동적으로 변경. 비용 소모가 커 거의 사용X

* 스토리지 시스템
 - DAS(Direct Attached Storage) : 하드디스크와 같은 데이터 저장장치를 호스트버스 어댑터에 직접 연결.
                                              저장장치와 호스트 기기 사이에 네트워크 디바이스 없이 직접 연결하는 방식으로 구성
 - NAS(Network Attached Storage) : 서버와 저장장치를 네트워크를 통해 연결하는 방식
 - SAN(Storage Area Network) : DAS의 빠른 처리와 NAS의 파일 공유 장점을 혼합. 서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성하는 방식

* 소프트웨어
 - Grayware : 사용자 입장에서는 악의적일 수도 있는 애드웨어, 트랙웨어, 기타 악성코드나 악성 공유웨어
 - Vaporware : 판매 계획 또는 배포 계획은 발표되었으나 실제로 고객에게 판매되거나 배포되지 않고 있는 소프트웨어
 - Shareware : 기능 혹은 사용기간에 제한을 두어 배포하는 소프트웨어, 무료로 사용 가능. 체험판 해보고 정식 구입 가능
 - Freeware : 무료로 사용/배포 가능 소프트웨어

* 정보 시스템
 - 고가용성 솔루션(HACMP) : 각 시스템 간에 공유 디스크를 중심으로 클러스터링으로 엮어 다수의 시스템을 동시 연결
					조직, 기업 기간 업무 서버 안정성을 높이기 위해 사용될 수 있음
					여러가지 방식으로 구현되며 2개의 서버를 연결하는 것으로 2개의 시스템이 각각 업무를 수행하도록 구현
 - 점대점 연결 방식(Point-to-Point Mode) : 연결된 두 단말이 동등하게 연결되어 각 단말이 클라이언트/혹은 서버가 될 수 있는 방식
 - 스턱스넷(Stuxnet) : 독일의 산업시설을 감시하고 파괴하기 위해 만들어진 악성 소프트웨어
 - 루팅(Rooting) : 스마트폰의 보안 기능을 해제하여 허용되지 않은 기능을 사용하거나 불법 앱을 사용할 수 있도록 변경하는 행위

* 빅데이터 분석 기술
 - Data Mining : 대량의 데이터를 분석하여 데이터 속 내재된 변수 사이의 상호관계를 규명하여 일정한 패턴을 찾아내는 기법
 - 무선 미터버스(WM-bus) : 수도 등의 원격 검침을 위해 사용되는 무선 프로토콜
 - 티지털 트윈(Digital Twin) : 현실속의 사물을 소프트웨어로 가상화한 모델
 - 지그비(Zigbee) : 저속 전송 속도를 갖는 홈오토메이션 및 데이터 네트워크를 위한 표준 기술

* 입력데이터 검증 및 표현의 보안 약점
 - SQL injection : SQL을 삽입하여 내부 DB서버의 데이터를 유출 및 변조, 관리자 인증을 우회하는 보안 약점
 - 경로 조작 및 자원 삽입 : 데이터 입출력 경로를 조작하여 서버 자원을 수정/삭제
 - XSS(Cross Site Scripting) : 악의적인 스트립트를 삽입하여 방문자의 정보를 탈취, 비정상적 기능 수행을 유발
 - 운영체제 명령어 삽입 : 외부 입력값을 통해 시스템 명령어의 실행을 유도함으로써 권한을 탈취/시스템 장애를 유발
 - 위험한 형식 파일 업로드 : 악의적인 명령어가 포함된 스크립트 파일을 업로드해서 시스템 손상/시스템 제어
 - 신뢰되지 않는 url 주소로 자동접속 연결 : 입력값으로 사이트 주소를 받는 경우 이를 조작해서 방문자를 피싱사이트로 유도
 - 메모리 버퍼 오버플로 : 연속된 메모리 공간을 사용하는 프로그램에서 할당된 메모리 범위를 넘어선 위치에서 자료를 읽거나 쓰려고 할 때 발생

* 암호화 알고리즘
 - ECC : 이산 대수 문제를 타원곡선으로 옮겨 기밀성과 효율성을 높인 암호화 알고리즘 
 - Rabin : 소인수 분해의 어려움에 안전성의 근거를 둔 암호화 알고리즘

* 암호화 알고리즘
 - SNEFRU : 1990년 R.C.Merkie가 발표한 해시 함수
 - MD5 : 1991년 R.Rivest가 MD4를 대체하기 위해 고안한 암호화 해시 함수
 - SHA : 1993년 미국국가안보국(NSA)가 처음 설계한 해시함수. 시리즈로 SHA-0이후 -1,-2,-224,-256,-384,-512발표됨
 - DES : 1975년 미국 NBS에서 발표한 개인키 암호화 알고리즘(해시 암호화 방식 아님)

* 공격
 - Memory Hacking : 컴퓨터 메모리(주기억장치)에 있는 데이터를 위/변조하는 해킹방법
 - SYN Flooding : 공격자가 가상 클라이언트로 위장해서 3-way-handshake과정을 의도적으로 중단시켜 서버를 대기상태로 만듬
 - SMURFING : IP나 ICMP의 특성을 악용해서 엄청난 데이터를 한 사이트에 보내서 네트워크를 불능 상태로 만드는 공격 방법
 - Land : 패킷 전송 시 송신 IP주소와 수신 IP주소를 모두 공격대상 주소로하여 공격대상에게 전송. 즉, 자신에 대해 무한히 응답하게하는 공격
 - TearDrop : Fragment Offset값을 변경시켜 수신 측에서 패킷을 재조립할 때 오류로 인한 과부하 발생 -> 시스템 다운

* 백도어 탐지 방법
 - 무결성 검사
 - 열린 포트 확인
 - 로그 분석
 - SetUID 파일 검사
 ** 백도어? - 영어로 후문이라는 뜻. 누군가가 정상적인 보안 조치를 우회하여 시스템에 액세스할 수 있는 모든 경로를 의미함

* 프로그램
 - SAMBA : 인트라넷이나 인터넷에서 서버의 파일 및 프린터를 사용할 수 있는 프리웨어 프로그램
 	      리눅스, 유닉스, OpenVMS, OS/2등 다양한 운용 체계에 설치되는 클라이언트/서버 프로토콜 기반 프로그램
	      이 프로그램으로 다른 컴퓨터에 파일, 프린터 등의 접근 요구를 할 수 있음
 - SDN : 네트워크를 컴퓨터처럼 모델링해서 여러 사용자가 각각의 소프트웨어들로 네트워킹을 가상화/제어하는 네트워크
 - IoT : 정보통신기술을 기반으로 실세계와 가상세계를 인터넷으로 연결해서 진보된 서비스 제공하는 서비스기반 기술
 - Ransomware : 인터넷사용자의 컴퓨터에 잠입해 내부 문서나 파일 등을 암호화해서 사용자가 열지 못하게 함

* 프로젝트 관리를 위한 3P
 - People / Problem / Process

* XP(eXtreme Programming)
 - 유연하게 대응하기위해 고객의 참여-개발 과정의 반복을 극대화
 - 비교적 소규모 인원의 개발에 효과적. 짧고 반복적인 개발주기, 단순 설계, 고객 적극적 참여
 - 5가지 핵심가치 : 용기(Courage), 단순성(Simplicity), 의사소통(Communication), 피드백(Feedback), 존중(Respect)

* 관계
 - Dependency(의존) : 하나의 사물의 변화가 다른 사물에도 영향. 한 클래스가 다른 클래스를 오퍼레이션의 매개변수로 사용하는 경우 나타나는 관계
 - Generalization(일반화) : 하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지 표현하는 관계
 - Association(연관) : 2개 이상의 사물이 서로 관련되어 있음을 표현하는 관계
 - Realization(실체화) : 사물이 할 수 있거나 해야하는 기능(오퍼레이션, 인터페이스)으로 서로를 그룹화 할 수 있는 관계

* 유스케이스 관계
 - 확장(Extend)관계 : 특별한 조건이 만족할 경우에만 수행하는 유스케이스

* 아키텍처 설계 과정
 1. 설계 목표 설정
 2. 시스템 타입 결정
 3. 스타일 적용 및 커스터마이즈
 4. 서브시스템의 기능, 인터페이스 동작 작성
 5. 아키텍처 설계 검토

* 주요 아키텍처 패턴 종류
 - 마스터-슬레이브 : 일반적으로 실시간 시스템에서 사용. 마스터 프로세스는 일반적으로 연산,통신,조정을 책임짐
			    슬레이브 프로세스는 마스터 프로세스에서 수행하는 연산,통신,조정을 제외하고 별도로 제한기능은 없음
 - 레이어 패턴 : 시스템을 계층으로 구분해서 구성하는 고전적인 방법. 각각의 서브시스템들이 계층구조를 이룸
			하위계층은 상위계층에 대한 서비스 제공자가 되고, 상위 계층은 하위 계층의 클라이언트가 됨
 - 클라이언트-서버 : 하나의 서버 컴포넌트가 다수의 클라이언트 컴포로 구성되는 패턴
			클라이언트가 서버에 요청하고 응답을 받아 사용자에게 제공하는 방식
 - 파이프-필터 : 데이터스트림 절차의 각 단계를 필터 컴포넌트로 캡슐화하여 파이프를 통해 데이터를 전송
 - 모델-뷰-컨트롤러 : 서브시스템을 세부분으로 구조화하는 패턴

* 디자인 패턴
 - Singleton패턴 : 하나의 객체를 생성하면 생성된 객체를 어디서든 참조는 할 수 있으나 여러 프로세스가 동시에 참조는 불가
 - 프로토타입 패턴 : 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴
 - Composite(컴포지트)패턴 : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴
 - Mediator(중재자) 패턴 : 수많은 객체들 간의 복잡한 상호작용을 캡슐화하여 객체로 정의하는 패턴
 - Template Method패턴 : 알고리즘은 상위 클래스에서 정의, 나머지는 하위 클래스에서 구체화하는 패턴
 - Observer 패턴 : 한 객체의 상태가 변화하면 객체에 상속되어있는 다른 객체들에게 변화된 상태를 전달하는 패턴
 - State(상태) 패턴 : 객체의 상태에 따라 동일한 동작을 다르게 처리해야할 때 사용하는 패턴
 - Composite(컴포지트) 패턴 : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴

* 미들웨어
 - TP-monitor(Transaction Processing) : 트랜잭션이 올바르게 처리되고 있는지 데이터를 감시하고 제어하는 미들웨어
 - ORB(object request broker) : 객체지향 미들웨어로 코바(CORBA) 표준 스펙을 구현
 - RPC(remote procedure call) : 응용 프로그램의 프로시저를 사용하여 원격 프로시저를 마치 로컬 프로시저처럼 호출하는 방식의 미들웨어

 

--------------------------------------------------------------------------------------------------------------------------------------

* 소프트웨어 개발 방법론 [구정객컴애제]		소프트웨어의 개발 시작부터 전 개발 과정을 형상화환 방법론
	구조적 방법론	전체 시스템을 나눠 개발하고 통합하는 분할-정복 방식의 방법론 / 나씨-슈나이더만 차트 사용
	정보공학 방법론	정보 시스템 개발에 필요한 절차를 체계화한 방법론 
	객체지향 방법론	객체라는 단위로 시스템을 설계하는 방법론
	컴포넌트 기반 방법론	컴포넌트를 조립해 작성하는 방법론
	애자일 방법론(Agile Model)	"절차보다 사람이 중심이 되어 변화에 유연하고 신속하게 효율적으로 개발 할 수 있는 신속 적응적 경량 개발 방법론
                                워터폴에 대비되는 방법론으로 최근 회사에서 각광받는 방법론 / 종류 :  XP(eXtreme Programming), 스크럼(Scrum), 칸반(Kanban), 크리스탈(Crystal), 린(LEAN)"
	제품 계열 방법론	제품에 적용할 공통 기능을 정의하여 개발하는 방법론 (임베디드 소프트웨어 작성에 유용)

* XP의 12가지 기본원리		
	짝 프로그래밍 (Pair Programming)	다른 사람과 페어로 개발하여 공동 책임을 지님
	공동 코드 소유 (Collective Ownership)	시스템에 있는 코드는 누구나 언제든 수정 가능
	지속적인 통합 (CI; Continuos Integration)	여러 번 소프트웨어를 통합하고 빌드해야 함
	계획 세우기 (Planning Process)	고객이 원하는 가치를 정의하고, 개발에 필요한 건 무엇이며, 어떤 곳에서 지연이 될 수 있는지 알려줘야 함
	작은 릴리즈 (Small Release) 	작은 시스템을 먼저 만들고, 짧은 단위로 업데이트
	메타포어 (Metaphor)	공통 이름 체계를 통해 의사소통을 원활히
	간단한 디자인 (Simple Design)	요구사항에 적합한 단순한 시스템을 설계
	테스트 기반 개발 (TDD; Test Drive Develop) 	테스트를 먼저 수행하고, 통과할 수 있는 코드를 작성
	리팩토링 (Refactoring) 	기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 코드를 재구성
	40시간 작업 (40-Hour Work)	피곤으로 인한 실수가 없도록 주 40시간만 일하자
	고객 상주 (On Site Customer)	개발자들의 질문에 즉각 대답해줄 수 있는 고객이 풀타임 상주해야 함
	코드 표준 (Coding Standard)	코딩 표준을 두고 효과적으로 개발

* 생성패턴 (Creational)     [생 빌프로 팩앱싱] or [생싱추백 빌프]		
	빌더(Builder)	작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성 , 객체의 생성 과정과 표현 방법을 분리 → 동일 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음
	프로토타입(Prototype)	원본 객체를 복제하는 방법으로 객체를 생성
	팩토리메서드(Factory Method)	생성할 객체의 클래스를 국한하지 않고 객체를 생성, 상위 클래스에서 인터페이스만 정의, 실제 생성은 서브 클래스가 담당
	추상팩토리(Abstract Factory)	인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현, 연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능
	싱글톤(Singleton)	전역 변수 사용x, 한 클래스에 한 객체만 존재, 생성된 객체는 어디서든지 참조 가능, 여러 프로세스가 동시에 참조할 수는 없음
