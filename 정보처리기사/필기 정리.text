* HIPO차트(Hierachy Input Process Output)
    하향식 소프트웨어 개발을 위한 문서화 도구.
    시스템의 분석 및 설계나 문서화할 때 사용되는 기법으로, 시스템 실행 과정인 입력/처리/출력 기능을 나타냄.
    체계적 문서 관리 가능.
    변경, 유지보수 가능.
    가시적도표, 총체적도표, 세부적도표가 있음.

* 사용자 인터페이스 종류
    CLI(Command line interface) : 명력/출력이 텍스트로 이루어진 인터페이스
    GUI(Graphical user interface) : 아이콘이나 메뉴를 마우스로 선택해서 작업하는 그래픽 환경 인터페이스
    NUI(Natural user interface) : 사용자의 말이나 행동으로 기기를 조작
    VUI(Voice user interface) : 사람의 음성으로 기기를 조작
    OUI(Organic user interface) : 모든 사물과 사용자간의 상호작용을 위한 인터페이스

* 자료흐름도(DFD, data flow diagram)
    시스템 구성요소인 프로세스와 프로세스 간 데이터 흐름을 표현하는 주요도구

* 정형 기술 검토(FTR: Formal Technical Review)
    가장 일반적인 검토 방법. 소프트웨어 기술자들에 의해 수행되는 소프트웨어 품질 보증 활동
    검토회의, 검열 등이 있으며 모두 회의형태. 제품의 검토에만 집중/의제 제한/논쟁,반박 제한/문제영역 명확/참가자 수 제한/체크리스트

* Reverse Engineering : 기존 소프트웨어를 분석해서 소프트웨어 개발 과정이나 데이터처리 과정을 설명하는 분석 및 설계 정보를
                        재발견하거나 다시 만들어내는 활동
  Restructuring : 기존 소프트어 구조를 향상시키기위해 코드를 재구성. 소프트웨어 기능/외적 동작은 바뀌지 않음.						

* ISO/IEC 25010에서 제시한 소프트웨어의 품질 특성
 - 기능적합성 : 기능완전성, 기능정확성, 기능적절성
 - 성능효율성 : 시간효율성, 자원효율성, 사양
 - 호환성 : 공존성, 상호운영성
 - 사용성 : 적절 인지정도, 학습성, 조작성, 사용자 오류방지, UI미학, 접근성
 - 신뢰성 : 성숙성, 사용가능성, 결합허용성, 복구성
 - 보안성 : 기밀성, 무결성, 부인방지, 책임추적성, 인증성
 - 유지보수성 : 모듈성, 재사용성, 분석성, 변경성, 시험성
 - 이식성 : 적응성, 설치성, 대체성

* 인터페이스 구현 검증도구
 - xUnit : 자바, c++, .net, http 등 다양한 언어를 지원하는 단위 테스트 프레임워크
- STAF : 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크
- FitNesse : 웹 기반 테스트케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크
- NTAF : FitNesse의 장점인 협업기능과 STAF의 장점인 재사용 및 확장성을 통합한 NHN(Naver)의 테스트 자동화 프레임워크
- Selenium : 다양한 브라우저 및 개발 언어를 지원하는 웹 애플리에키션 테스트 프레임워크
- watir : Ruby를 사용하는 애플리케이션 테스트 프레임워크
* Foxbase? : dBASE용 컴파일러 패키지 상품명. 인터페이스 구현 검증도구는 아님

* 정적 분석 도구 : pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura
  동적 분석 도구 : Avalanche, Valgrind

* 데크(Deque) : 삽입과 삭제가 리스트의 양쪽 끝에서 발생.
                입력이 한쪽에서만 발생하고 출력은 양쪽에서 일어날 수 있는 입력제한과,
				입력은 양쪽에서 일어나고 출력은 한곳에서만 이루어지는 출력 제한이 있음.
  스택(Stack) : 리스트의 한쪽 끝으로만 삽입/삭제가 이루어지는 자료구조
  큐(Queue) : 리스트의 한쪽에서는 삽입, 다른 한쪽에서는 삭제가 이루어지는 자료구조

* 알파 검사 : 검증 검사 기법 중 개발자 장소에서 사용자가 개발자 앞에서 행하는 기법. 일반적으로 통제된 환경.
  베타 테스트 : 선정된 최종 사용자가 여러명의 사용자 앞에서 행하는 테스트기법(필드 테스팅). 개발자에 의해 제어되지 않음. 개발자에게 주기적 보고.

* 알고리즘 시간복잡도
 - O(1) : 입력값(n)에 관계 없이 일정하게 문제 해결에 하나의 단계만을 거침
 - O(log2n) : 문제 해결에 필요한 단계가 입력값(n) 또는 조건에 의해 감소
 - O(n) : 문제 해결에 필요한 단계가 입력값(n)과 1:1 관계를 가짐
 - O(nlog2n) : 문제 해결에 필요한 단계가 n(log2n)번만큼 수행됨
 - O(n2) : 문제 해결에 필요한 단계가 입력값(n)의 제곱만큼 수행됨
 - O(2n) : 문제 해결에 필요한 단계가 2의 입력값(n) 제곱만큼 수행됨

* 디지털 저작권 관리(DRM)의 기술 요소
 - 암호화, 키관리, 암호화 파일 생성, 식별기술, 저작권 표현, 정책 관리, 크랙 방지, 인증



* 소프트웨어 개발 방법론 [구정객컴애제]		소프트웨어의 개발 시작부터 전 개발 과정을 형상화환 방법론
	구조적 방법론	전체 시스템을 나눠 개발하고 통합하는 분할-정복 방식의 방법론 / 나씨-슈나이더만 차트 사용
	정보공학 방법론	정보 시스템 개발에 필요한 절차를 체계화한 방법론 
	객체지향 방법론	객체라는 단위로 시스템을 설계하는 방법론
	컴포넌트 기반 방법론	컴포넌트를 조립해 작성하는 방법론
	애자일 방법론(Agile Model)	"절차보다 사람이 중심이 되어 변화에 유연하고 신속하게 효율적으로 개발 할 수 있는 신속 적응적 경량 개발 방법론
                                워터폴에 대비되는 방법론으로 최근 회사에서 각광받는 방법론 / 종류 :  XP(eXtreme Programming), 스크럼(Scrum), 칸반(Kanban), 크리스탈(Crystal), 린(LEAN)"
	제품 계열 방법론	제품에 적용할 공통 기능을 정의하여 개발하는 방법론 (임베디드 소프트웨어 작성에 유용)

* XP의 12가지 기본원리		
	짝 프로그래밍 (Pair Programming)	다른 사람과 페어로 개발하여 공동 책임을 지님
	공동 코드 소유 (Collective Ownership)	시스템에 있는 코드는 누구나 언제든 수정 가능
	지속적인 통합 (CI; Continuos Integration)	여러 번 소프트웨어를 통합하고 빌드해야 함
	계획 세우기 (Planning Process)	고객이 원하는 가치를 정의하고, 개발에 필요한 건 무엇이며, 어떤 곳에서 지연이 될 수 있는지 알려줘야 함
	작은 릴리즈 (Small Release) 	작은 시스템을 먼저 만들고, 짧은 단위로 업데이트
	메타포어 (Metaphor)	공통 이름 체계를 통해 의사소통을 원활히
	간단한 디자인 (Simple Design)	요구사항에 적합한 단순한 시스템을 설계
	테스트 기반 개발 (TDD; Test Drive Develop) 	테스트를 먼저 수행하고, 통과할 수 있는 코드를 작성
	리팩토링 (Refactoring) 	기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 코드를 재구성
	40시간 작업 (40-Hour Work)	피곤으로 인한 실수가 없도록 주 40시간만 일하자
	고객 상주 (On Site Customer)	개발자들의 질문에 즉각 대답해줄 수 있는 고객이 풀타임 상주해야 함
	코드 표준 (Coding Standard)	코딩 표준을 두고 효과적으로 개발

* 생성패턴 (Creational)     [생 빌프로 팩앱싱] or [생싱추백 빌프]		
	빌더(Builder)	작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성 , 객체의 생성 과정과 표현 방법을 분리 → 동일 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음
	프로토타입(Prototype)	원본 객체를 복제하는 방법으로 객체를 생성
	팩토리메서드(Factory Method)	생성할 객체의 클래스를 국한하지 않고 객체를 생성, 상위 클래스에서 인터페이스만 정의, 실제 생성은 서브 클래스가 담당
	추상팩토리(Abstract Factory)	인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현, 연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능
	싱글톤(Singleton)	전역 변수 사용x, 한 클래스에 한 객체만 존재, 생성된 객체는 어디서든지 참조 가능, 여러 프로세스가 동시에 참조할 수는 없음
