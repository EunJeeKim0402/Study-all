* HIPO차트(Hierachy Input Process Output)
    하향식 소프트웨어 개발을 위한 문서화 도구.
    시스템의 분석 및 설계나 문서화할 때 사용되는 기법으로, 시스템 실행 과정인 입력/처리/출력 기능을 나타냄.
    체계적 문서 관리 가능.
    변경, 유지보수 가능.
    가시적도표, 총체적도표, 세부적도표가 있음.

* 사용자 인터페이스 종류
    CLI(Command line interface) : 명력/출력이 텍스트로 이루어진 인터페이스
    GUI(Graphical user interface) : 아이콘이나 메뉴를 마우스로 선택해서 작업하는 그래픽 환경 인터페이스
    NUI(Natural user interface) : 사용자의 말이나 행동으로 기기를 조작
    VUI(Voice user interface) : 사람의 음성으로 기기를 조작
    OUI(Organic user interface) : 모든 사물과 사용자간의 상호작용을 위한 인터페이스

* 자료흐름도(DFD, data flow diagram)
    시스템 구성요소인 프로세스와 프로세스 간 데이터 흐름을 표현하는 주요도구 

* 소프트웨어 개발 방법론 [구정객컴애제]		소프트웨어의 개발 시작부터 전 개발 과정을 형상화환 방법론
	구조적 방법론	전체 시스템을 나눠 개발하고 통합하는 분할-정복 방식의 방법론 / 나씨-슈나이더만 차트 사용
	정보공학 방법론	정보 시스템 개발에 필요한 절차를 체계화한 방법론 
	객체지향 방법론	객체라는 단위로 시스템을 설계하는 방법론
	컴포넌트 기반 방법론	컴포넌트를 조립해 작성하는 방법론
	애자일 방법론(Agile Model)	"절차보다 사람이 중심이 되어 변화에 유연하고 신속하게 효율적으로 개발 할 수 있는 신속 적응적 경량 개발 방법론
                                워터폴에 대비되는 방법론으로 최근 회사에서 각광받는 방법론 / 종류 :  XP(eXtreme Programming), 스크럼(Scrum), 칸반(Kanban), 크리스탈(Crystal), 린(LEAN)"
	제품 계열 방법론	제품에 적용할 공통 기능을 정의하여 개발하는 방법론 (임베디드 소프트웨어 작성에 유용)

* XP의 12가지 기본원리		
	짝 프로그래밍 (Pair Programming)	다른 사람과 페어로 개발하여 공동 책임을 지님
	공동 코드 소유 (Collective Ownership)	시스템에 있는 코드는 누구나 언제든 수정 가능
	지속적인 통합 (CI; Continuos Integration)	여러 번 소프트웨어를 통합하고 빌드해야 함
	계획 세우기 (Planning Process)	고객이 원하는 가치를 정의하고, 개발에 필요한 건 무엇이며, 어떤 곳에서 지연이 될 수 있는지 알려줘야 함
	작은 릴리즈 (Small Release) 	작은 시스템을 먼저 만들고, 짧은 단위로 업데이트
	메타포어 (Metaphor)	공통 이름 체계를 통해 의사소통을 원활히
	간단한 디자인 (Simple Design)	요구사항에 적합한 단순한 시스템을 설계
	테스트 기반 개발 (TDD; Test Drive Develop) 	테스트를 먼저 수행하고, 통과할 수 있는 코드를 작성
	리팩토링 (Refactoring) 	기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 코드를 재구성
	40시간 작업 (40-Hour Work)	피곤으로 인한 실수가 없도록 주 40시간만 일하자
	고객 상주 (On Site Customer)	개발자들의 질문에 즉각 대답해줄 수 있는 고객이 풀타임 상주해야 함
	코드 표준 (Coding Standard)	코딩 표준을 두고 효과적으로 개발

* 생성패턴 (Creational)     [생 빌프로 팩앱싱] or [생싱추백 빌프]		
	빌더(Builder)	작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성 , 객체의 생성 과정과 표현 방법을 분리 → 동일 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음
	프로토타입(Prototype)	원본 객체를 복제하는 방법으로 객체를 생성
	팩토리메서드(Factory Method)	생성할 객체의 클래스를 국한하지 않고 객체를 생성, 상위 클래스에서 인터페이스만 정의, 실제 생성은 서브 클래스가 담당
	추상팩토리(Abstract Factory)	인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현, 연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능
	싱글톤(Singleton)	전역 변수 사용x, 한 클래스에 한 객체만 존재, 생성된 객체는 어디서든지 참조 가능, 여러 프로세스가 동시에 참조할 수는 없음
