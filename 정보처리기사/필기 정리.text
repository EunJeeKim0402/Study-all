* HIPO차트(Hierachy Input Process Output)
    하향식 소프트웨어 개발을 위한 문서화 도구.
    시스템의 분석 및 설계나 문서화할 때 사용되는 기법으로, 시스템 실행 과정인 입력/처리/출력 기능을 나타냄.
    체계적 문서 관리 가능.
    변경, 유지보수 가능.
    가시적도표, 총체적도표, 세부적도표가 있음.

* 사용자 인터페이스 종류
    CLI(Command line interface) : 명력/출력이 텍스트로 이루어진 인터페이스
    GUI(Graphical user interface) : 아이콘이나 메뉴를 마우스로 선택해서 작업하는 그래픽 환경 인터페이스
    NUI(Natural user interface) : 사용자의 말이나 행동으로 기기를 조작
    VUI(Voice user interface) : 사람의 음성으로 기기를 조작
    OUI(Organic user interface) : 모든 사물과 사용자간의 상호작용을 위한 인터페이스

* 자료흐름도(DFD, data flow diagram)
    시스템 구성요소인 프로세스와 프로세스 간 데이터 흐름을 표현하는 주요도구

* 정형 기술 검토(FTR: Formal Technical Review)
    가장 일반적인 검토 방법. 소프트웨어 기술자들에 의해 수행되는 소프트웨어 품질 보증 활동
    검토회의, 검열 등이 있으며 모두 회의형태. 제품의 검토에만 집중/의제 제한/논쟁,반박 제한/문제영역 명확/참가자 수 제한/체크리스트

* Reverse Engineering : 기존 소프트웨어를 분석해서 소프트웨어 개발 과정이나 데이터처리 과정을 설명하는 분석 및 설계 정보를
                        재발견하거나 다시 만들어내는 활동
  Restructuring : 기존 소프트어 구조를 향상시키기위해 코드를 재구성. 소프트웨어 기능/외적 동작은 바뀌지 않음.						

* ISO/IEC 25010에서 제시한 소프트웨어의 품질 특성
 - 기능적합성 : 기능완전성, 기능정확성, 기능적절성
 - 성능효율성 : 시간효율성, 자원효율성, 사양
 - 호환성 : 공존성, 상호운영성
 - 사용성 : 적절 인지정도, 학습성, 조작성, 사용자 오류방지, UI미학, 접근성
 - 신뢰성 : 성숙성, 사용가능성, 결합허용성, 복구성
 - 보안성 : 기밀성, 무결성, 부인방지, 책임추적성, 인증성
 - 유지보수성 : 모듈성, 재사용성, 분석성, 변경성, 시험성
 - 이식성 : 적응성, 설치성, 대체성

* 인터페이스 구현 검증도구
 - xUnit : 자바, c++, .net, http 등 다양한 언어를 지원하는 단위 테스트 프레임워크
- STAF : 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크
- FitNesse : 웹 기반 테스트케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크
- NTAF : FitNesse의 장점인 협업기능과 STAF의 장점인 재사용 및 확장성을 통합한 NHN(Naver)의 테스트 자동화 프레임워크
- Selenium : 다양한 브라우저 및 개발 언어를 지원하는 웹 애플리에키션 테스트 프레임워크
- watir : Ruby를 사용하는 애플리케이션 테스트 프레임워크
* Foxbase? : dBASE용 컴파일러 패키지 상품명. 인터페이스 구현 검증도구는 아님

* 정적 분석 도구 : pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura
  동적 분석 도구 : Avalanche, Valgrind

* 자료구조
 - 데크(Deque) : 삽입과 삭제가 리스트의 양쪽 끝에서 발생.
                입력이 한쪽에서만 발생하고 출력은 양쪽에서 일어날 수 있는 입력제한과,
				입력은 양쪽에서 일어나고 출력은 한곳에서만 이루어지는 출력 제한이 있음.
 - 스택(Stack) : 리스트의 한쪽 끝으로만 삽입/삭제가 이루어지는 자료구조
 - 큐(Queue) : 리스트의 한쪽에서는 삽입, 다른 한쪽에서는 삭제가 이루어지는 자료구조
 - 트리(Tree) : 정점(Node)와 선분(Branch)을 이용하여 사이클을 이루지 않도록 구성한 그래프의 특수한 형태

* 알파 검사 : 검증 검사 기법 중 개발자 장소에서 사용자가 개발자 앞에서 행하는 기법. 일반적으로 통제된 환경.
  베타 테스트 : 선정된 최종 사용자가 여러명의 사용자 앞에서 행하는 테스트기법(필드 테스팅). 개발자에 의해 제어되지 않음. 개발자에게 주기적 보고.

* 알고리즘 시간복잡도
 - O(1) : 입력값(n)에 관계 없이 일정하게 문제 해결에 하나의 단계만을 거침
 - O(log2n) : 문제 해결에 필요한 단계가 입력값(n) 또는 조건에 의해 감소
 - O(n) : 문제 해결에 필요한 단계가 입력값(n)과 1:1 관계를 가짐
 - O(nlog2n) : 문제 해결에 필요한 단계가 n(log2n)번만큼 수행됨
 - O(n2) : 문제 해결에 필요한 단계가 입력값(n)의 제곱만큼 수행됨
 - O(2n) : 문제 해결에 필요한 단계가 2의 입력값(n) 제곱만큼 수행됨

* 디지털 저작권 관리(DRM)의 기술 요소
 - 암호화, 키관리, 암호화 파일 생성, 식별기술, 저작권 표현, 정책 관리, 크랙 방지, 인증

* DML(Data Manipulation Language) 데이터 조작어 : SELECT, INSERT, UPDATE, DELETE
  DDL(Data Definition Language) 데이터 정의어 : CREATE, ALTER, DROP, RENAME, TRUNCATE
  DCL(Data Control Language) 데이터 제어어 : GRANT, REVOKE
  TCL(Transaction Control Language) 트랙잭션 제어어 : COMMIT, ROLLBACK, SAVEPOINT

* 데이터베이스의 트랜잭션 성질
 - Consistency 일관성 : 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성있는 DB상태로 변환.
                                 시스템이 가지고 있는 고정 요소는 트랜잭션 수행전/완료 후 상태가 같아야됨
 - Atomicity 원자성 : 트랜잭션의 연산은 DB에 모두 반영되도록 완료되든지 아니면 Rollback되어야함
 - Isolation 독립성,격리성,순차성 : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 다른 트랜잭션의 연산이 끼어들 수 없음
 - Durability 영속성,지속성 : 성공적으로 완료된 트랜잭션 결과는 시스템이 고장나더라도 영구 반영되어야함

* 트랜잭션의 상태
 - Active 활동 : 트랜잭션이 실행중
 - Failed 실패 : 트랜잭션 실행에 오류가 발생하여 중단됨
 - Aborted 철회 : 트랜잭션이 비정상적으로 종료되어 롤백 연산을 수행했음
 - Patially Committed 부분 완료 : 트랜잭션을 모두 성공실행하고 commit 실행되기 직전
 - Committed 완료 : 트랜잭션을 모두 성공 실행하고 commit 연산을 실행한 후의 상태
 - Recovery 회복 : 손상된 데이터베이스를 손상 이전의 정상적인 상태로 복구시키는 작업

* 로킹 기법(Locking) : DB병행제어를 위해 트랜잭션이 접근하고자하는 데이터를 잠그는 병행제어 기법.
* 2단계 로킹규약 : 새로운 Lock은 수행할 수 없지만 Unlock은 수행할 수 없는 확장단계와
                          새로운 Unlock은 수행할 수 있지만 Lock은 수행할 수 없는 축소단계가 있음
                          직렬성을 보장하는 장점은 있으나 교착상태를 예방할 수 없다는 단점이 있음

* 키의 개념 및 종류
 - 슈퍼키(Super key) : 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키. 유일성은 만족하지만 최소성은 만족하지못함
 - 후보키(Candidate key) : 릴레이션을 구성하는 속성들 중 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합. 유일성,최소성 모두 만족
 - 기본키(Primary key) : 후보키 중 특별히 선정된 키로 중복값, nul값을 가질 수 없음
 - 대체키(Alternte key) : 후보키 중 선정된 기본키를 제외한 나머지 후보키를 의미
 - 외래키(Foreign key) : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미. 릴레이션간의 관계를 표현할 때 사용

* 관계해석(Relational Calculus) : 관계 DB모델 제안자인 '코드'가 수학의 술어해석에 기반을 두고 관계 데이터베이스를 위해 제안함
                                             관계 데이터의 연산을 표현하는 방법으로, 원하는 정보를 정의할 때는 계산 수식을 사용함
                                             원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성. 튜플 관계해석과 도메인 관계해석이 있음
                                             관계해석과 관계대수는 관계DB를 처리하는 기능과 능력면에서 동등, 관계대수로 표현한 식은 관계해석으로 표현 가능

* 분산데이터베이스 : 논리적으로는 같은 시스템에 속하지만 물리적으로는 컴퓨터 네트워크를 통해 분산되어있는 DB
 - 위치 투명성(Location Transparency) : 접근하려는 DB의 실제 위치를 알 필요 없이 단지 DB논리적인 명칭만으로 접근 가능
 - 중복 투명성(Replication Transparency) : 동일 데이터가 여러곳에 중복되어있어도 사용자는 하나의 데이터만 존재하는 것처럼 사용 가능
 - 병행 투명성(Concurrency Transparency) : 분산DB와 관련된 다수 트랜잭션이 동시에 실행되어도 그 트랜잭션들의 수행결과는 서로 영향X
 - 장애 투명성(Failure Transparency) : 트랜잭션, DBMS, 네트워크, 컴퓨터 장애에도 불구하고 트랜잭션은 정확하게 수행됨

 * 분산 데이터베이스의 구성요소
 - 분산처리기 : 자체적으로 처리능력을 가지며, 지리적으로 분산되어있는 컴퓨터 시스템을 말함
 - 분산 데이터베이스 : 지리적으로 분산되어있는 db로, 해당 지역의 특성에 맞게 db가 구성됨
 - 통신 네트워크 : 분산 처리기들을 통신망으로 연결하여 논리적으로 하나의 시스템처럼 작동할 수 있도록 하는 통신 네트워크

* 시스템 카탈로그 : 시스템 그 자체에 관련이 있는 다양한 객체 정보를 포함하는 시스템 데이터베이스
                          데이터 사전이라고도 함. 시스템 카탈로그에 저장된 정보를 메타데이터라고 함. SQL검색 가능.
                          카탈로그는 DBMS가 스스로 유지/생성. 삽입/삭제/업뎃 불가. 검색은 가능.

* 리눅스/유닉스 명령어
 - cat : 파일 내용을 화면에 표시
 - chdir : 현재 사용할 디렉터리 위치 변경
 - chmod : 파일의 보호모드를 설정해서 파일 사용 허가 지정
 - chown : 소유자 변경
 - cp : 파일 복사
 - exec : 새로운 프로세스 수행
 - find : 파일을 찾음
 - fork : 새로운 프로세스 생성(하위 프로세스 호출, 프로세스 복제 명령)
 - fsck : 파일 시스템 검사/보수
 - getipd : 자신의 프로세스 아이디를 얻음
 - getppid : 부모 프로세스 아이디를 얻음
 - ls : 현재 디렉토리 내 파일 목록 확인
 - mount/umount : 파일 시스템 마운팅/마운팅 해제
 - rm : 파일 삭제
 - wait : fork 후 exec에 의해 실행되는 프로세스의 상위 프로세스가 하위 프로세스 종료 등의 이벤트를 기다림
 - uname : 시스템의 이름과 버전, 네트워크 호스트명 등의 시스템 정보 표시

* 배치 전략
 - 최초 적합(First-Fit) : 빈 영역 중에서 첫번째 분할 영역에 배치
 - 최적 적합(Best-Fit) : 빈 영역 중에서 단편화를 가장 작게 남기는 분할 영역에 배치
 - 최악 적합(Worst-Fit) : 빈 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치
 ** ex) 빈 기억 공간이 20K, 40K, 8K일때 기억장치 배치 전략으로 Worst-Fit을 사용해서 17K프로그램 적재 시 내부단편화의 크기는 40K - 17K = 23K

* 자동 반복 요청(ARQ : Automatic Repeat reQuest) 오류 제어에 사용됨
 - 정지-대기(Stop-and-Wait) ARQ : 오류가 발생한 경우 앞서 송신했던 블록만 재전송
 - Go-Back-N ARQ : 오류가 발생한 부분부터 모두 재전송해서 중복 전송 가능성
 - Selectiv-Repeat(선택적 재전송) ARQ : 여러 블록을 연속적으로 전송, 수신에서 부정응답 보내면 오류가 발생한 블록만을 재전송
 - 적응적(Adaptiv) ARQ : 전송효율 최대. 데이터블록 길이를 채널의 상태에 따라 동적으로 변경. 비용 소모가 커 거의 사용X

* 스토리지 시스템
 - DAS(Direct Attached Storage) : 하드디스크와 같은 데이터 저장장치를 호스트버스 어댑터에 직접 연결.
                                              저장장치와 호스트 기기 사이에 네트워크 디바이스 없이 직접 연결하는 방식으로 구성
 - NAS(Network Attached Storage) : 서버와 저장장치를 네트워크를 통해 연결하는 방식
 - SAN(Storage Area Network) : DAS의 빠른 처리와 NAS의 파일 공유 장점을 혼합. 서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성하는 방식

* 소프트웨어
 - Grayware : 사용자 입장에서는 악의적일 수도 있는 애드웨어, 트랙웨어, 기타 악성코드나 악성 공유웨어
 - Vaporware : 판매 계획 또는 배포 계획은 발표되었으나 실제로 고객에게 판매되거나 배포되지 않고 있는 소프트웨어
 - Shareware : 기능 혹은 사용기간에 제한을 두어 배포하는 소프트웨어, 무료로 사용 가능. 체험판 해보고 정식 구입 가능
 - Freeware : 무료로 사용/배포 가능 소프트웨어

* 정보 시스템
 - 고가용성 솔루션(HACMP) : 각 시스템 간에 공유 디스크를 중심으로 클러스터링으로 엮어 다수의 시스템을 동시 연결
					조직, 기업 기간 업무 서버 안정성을 높이기 위해 사용될 수 있음
					여러가지 방식으로 구현되며 2개의 서버를 연결하는 것으로 2개의 시스템이 각각 업무를 수행하도록 구현
 - 점대점 연결 방식(Point-to-Point Mode) : 연결된 두 단말이 동등하게 연결되어 각 단말이 클라이언트/혹은 서버가 될 수 있는 방식
 - 스턱스넷(Stuxnet) : 독일의 산업시설을 감시하고 파괴하기 위해 만들어진 악성 소프트웨어
 - 루팅(Rooting) : 스마트폰의 보안 기능을 해제하여 허용되지 않은 기능을 사용하거나 불법 앱을 사용할 수 있도록 변경하는 행위

* 빅데이터 분석 기술
 - Data Mining : 대량의 데이터를 분석하여 데이터 속 내재된 변수 사이의 상호관계를 규명하여 일정한 패턴을 찾아내는 기법
 - 무선 미터버스(WM-bus) : 수도 등의 원격 검침을 위해 사용되는 무선 프로토콜
 - 티지털 트윈(Digital Twin) : 현실속의 사물을 소프트웨어로 가상화한 모델
 - 지그비(Zigbee) : 저전력, 저비용, 저속도와 2.4GHz를 기반으로하는 홈 자동화 및 데이터 전송을 위한 무선 네트워크로 전력소모 최소화

* 입력데이터 검증 및 표현의 보안 약점
 - SQL injection : SQL을 삽입하여 내부 DB서버의 데이터를 유출 및 변조, 관리자 인증을 우회하는 보안 약점
 - 경로 조작 및 자원 삽입 : 데이터 입출력 경로를 조작하여 서버 자원을 수정/삭제
 - XSS(Cross Site Scripting) : 악의적인 스트립트를 삽입하여 방문자의 정보를 탈취, 비정상적 기능 수행을 유발
 - 운영체제 명령어 삽입 : 외부 입력값을 통해 시스템 명령어의 실행을 유도함으로써 권한을 탈취/시스템 장애를 유발
 - 위험한 형식 파일 업로드 : 악의적인 명령어가 포함된 스크립트 파일을 업로드해서 시스템 손상/시스템 제어
 - 신뢰되지 않는 url 주소로 자동접속 연결 : 입력값으로 사이트 주소를 받는 경우 이를 조작해서 방문자를 피싱사이트로 유도
 - 메모리 버퍼 오버플로 : 연속된 메모리 공간을 사용하는 프로그램에서 할당된 메모리 범위를 넘어선 위치에서 자료를 읽거나 쓰려고 할 때 발생

* 암호화 알고리즘
 - ECC : 이산 대수 문제를 타원곡선으로 옮겨 기밀성과 효율성을 높인 암호화 알고리즘 
 - Rabin : 소인수 분해의 어려움에 안전성의 근거를 둔 암호화 알고리즘

* 암호화 알고리즘
 - SNEFRU : 1990년 R.C.Merkie가 발표한 해시 함수
 - MD5 : 1991년 R.Rivest가 MD4를 대체하기 위해 고안한 암호화 해시 함수
 - SHA : 1993년 미국국가안보국(NSA)가 처음 설계한 해시함수. 시리즈로 SHA-0이후 -1,-2,-224,-256,-384,-512발표됨
 - DES(Data Encryption Standard) : 1975년 미국 NBS에서 발표한 개인키 암호화 알고리즘(해시 암호화 방식 아님). 블록크기 64비트, 키 길이 56비트
 - AES(Advanced Encryption Standard) : 2001년 미국표준기술연구소(NST)에서 개발한 개인키 암호화 알고리즘으로 블록 크기는 128비트, 키 길이에 따라 128,192,256으로 분류됨
 - RSA(Rivest Shamir Adleman) : 1978년 MIT의 라이베스트, 샤미르, 애들먼에 의해 제안된 공개키 암호화 알고리즘으로 큰 숫자를 소인수분해하기 어렵다는 것에 기반해 만들어짐

* 공격
 - Memory Hacking : 컴퓨터 메모리(주기억장치)에 있는 데이터를 위/변조하는 해킹방법
 - SYN Flooding : 공격자가 가상 클라이언트로 위장해서 3-way-handshake과정을 의도적으로 중단시켜 서버를 대기상태로 만듬
 - SMURFING : IP나 ICMP의 특성을 악용해서 엄청난 데이터를 한 사이트에 보내서 네트워크를 불능 상태로 만드는 공격 방법
 - Land : 패킷 전송 시 송신 IP주소와 수신 IP주소를 모두 공격대상 주소로하여 공격대상에게 전송. 즉, 자신에 대해 무한히 응답하게하는 공격
 - TearDrop : Fragment Offset값을 변경시켜 수신 측에서 패킷을 재조립할 때 오류로 인한 과부하 발생 -> 시스템 다운

* 백도어 탐지 방법
 - 무결성 검사
 - 열린 포트 확인
 - 로그 분석
 - SetUID 파일 검사
 ** 백도어? - 영어로 후문이라는 뜻. 누군가가 정상적인 보안 조치를 우회하여 시스템에 액세스할 수 있는 모든 경로를 의미함

* 프로그램
 - SAMBA : 인트라넷이나 인터넷에서 서버의 파일 및 프린터를 사용할 수 있는 프리웨어 프로그램
 	      리눅스, 유닉스, OpenVMS, OS/2등 다양한 운용 체계에 설치되는 클라이언트/서버 프로토콜 기반 프로그램
	      이 프로그램으로 다른 컴퓨터에 파일, 프린터 등의 접근 요구를 할 수 있음
 - SDN : 네트워크를 컴퓨터처럼 모델링해서 여러 사용자가 각각의 소프트웨어들로 네트워킹을 가상화/제어하는 네트워크
 - IoT : 정보통신기술을 기반으로 실세계와 가상세계를 인터넷으로 연결해서 진보된 서비스 제공하는 서비스기반 기술
 - Ransomware : 인터넷사용자의 컴퓨터에 잠입해 내부 문서나 파일 등을 암호화해서 사용자가 열지 못하게 함

* 프로젝트 관리를 위한 3P
 - People / Problem / Process

* XP(eXtreme Programming)
 - 유연하게 대응하기위해 고객의 참여-개발 과정의 반복을 극대화
 - 비교적 소규모 인원의 개발에 효과적. 짧고 반복적인 개발주기, 단순 설계, 고객 적극적 참여
 - 5가지 핵심가치 : 용기(Courage), 단순성(Simplicity), 의사소통(Communication), 피드백(Feedback), 존중(Respect)

* 관계
 - Dependency(의존) : 하나의 사물의 변화가 다른 사물에도 영향. 한 클래스가 다른 클래스를 오퍼레이션의 매개변수로 사용하는 경우 나타나는 관계
 - Generalization(일반화) : 하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지 표현하는 관계
 - Association(연관) : 2개 이상의 사물이 서로 관련되어 있음을 표현하는 관계
 - Realization(실체화) : 사물이 할 수 있거나 해야하는 기능(오퍼레이션, 인터페이스)으로 서로를 그룹화 할 수 있는 관계

* 유스케이스 관계
 - 확장(Extend)관계 : 특별한 조건이 만족할 경우에만 수행하는 유스케이스

* 아키텍처 설계 과정
 1. 설계 목표 설정
 2. 시스템 타입 결정
 3. 스타일 적용 및 커스터마이즈
 4. 서브시스템의 기능, 인터페이스 동작 작성
 5. 아키텍처 설계 검토

* 주요 아키텍처 패턴 종류
 - 마스터-슬레이브 : 일반적으로 실시간 시스템에서 사용. 마스터 프로세스는 일반적으로 연산,통신,조정을 책임짐
			    슬레이브 프로세스는 마스터 프로세스에서 수행하는 연산,통신,조정을 제외하고 별도로 제한기능은 없음
 - 레이어 패턴 : 시스템을 계층으로 구분해서 구성하는 고전적인 방법. 각각의 서브시스템들이 계층구조를 이룸
			하위계층은 상위계층에 대한 서비스 제공자가 되고, 상위 계층은 하위 계층의 클라이언트가 됨
 - 클라이언트-서버 : 하나의 서버 컴포넌트가 다수의 클라이언트 컴포로 구성되는 패턴
			클라이언트가 서버에 요청하고 응답을 받아 사용자에게 제공하는 방식
 - 파이프-필터 : 데이터스트림 절차의 각 단계를 필터 컴포넌트로 캡슐화하여 파이프를 통해 데이터를 전송
 - 모델-뷰-컨트롤러 : 서브시스템을 세부분으로 구조화하는 패턴

* 디자인 패턴
 - Singleton패턴 : 하나의 객체를 생성하면 생성된 객체를 어디서든 참조는 할 수 있으나 여러 프로세스가 동시에 참조는 불가
 - 프로토타입 패턴 : 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴
 - Composite(컴포지트)패턴 : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴
 - Mediator(중재자) 패턴 : 수많은 객체들 간의 복잡한 상호작용을 캡슐화하여 객체로 정의하는 패턴
 - Template Method패턴 : 알고리즘은 상위 클래스에서 정의, 나머지는 하위 클래스에서 구체화하는 패턴
 - Observer 패턴 : 한 객체의 상태가 변화하면 객체에 상속되어있는 다른 객체들에게 변화된 상태를 전달하는 패턴
 - State(상태) 패턴 : 객체의 상태에 따라 동일한 동작을 다르게 처리해야할 때 사용하는 패턴
 - Composite(컴포지트) 패턴 : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴

* 미들웨어
 - TP-monitor(Transaction Processing) : 트랜잭션이 올바르게 처리되고 있는지 데이터를 감시하고 제어하는 미들웨어
 - ORB(object request broker) : 객체지향 미들웨어로 코바(CORBA) 표준 스펙을 구현
 - RPC(remote procedure call) : 응용 프로그램의 프로시저를 사용하여 원격 프로시저를 마치 로컬 프로시저처럼 호출하는 방식의 미들웨어

* 테스트
 - 인수 테스트(Acceptance) : 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 방법
 - 단위 테스트(Unit) : 코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춘 테스트
 - 시스템 테스트(System) : 개발된 소프트웨어가 해당 컴퓨터 시스템에서 완벽하게 수행되는지를 점검
 - 통합 테스트(Integration) : 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트

* Collision(충돌현상) 해결 방법
 - Chaining 체이닝 : 해시 함수가 서로 른 키에 대해 같은 주소값을 반환해서 충돌이 발생하면 각 데이터를 해당 주소에 있는 링크드리스트에 삽입해서 문제 해결
 - Open Addressing 개방 주소법 : Collision 발생 시 순차적으로 그 다음 빈 버킷을 찾아 데이터를 저장
 - Rehashing 재해싱 : Collision 발생 시 새로운 해싱 함수로 새로운 홈 주소를 구하는 방법

* 접근 제어 기술
 - DRM(Digital Right Management) : 디지털 콘텐츠/디바이스 사용 제한을 위해 하드웨어 제조업자, 저작권자, 출판업자 등이 사용할 수 있는 접근제어기술
 - DLP(Data Leakage/Loss Prevention) : 데이터 유출 방지. 내부 정보의 외부 유출을 방지하는 보안 솔루션
 - DOI(Digital Object Identifier) : 디지털 콘텐츠 식별자. 인터넷에 유통되는 모든 디지털 콘텐츠에 부여되는 고유 식별자
 - PKI(Public Key Infrastructure) : 공개키 기반 구조. 공개키 암호 시스템을 안전하게 사용/관리하기 위한 정보보호 표준방식

* 테스트 기법
 - Equivalence Partitioning Testing 동치 분할 검사 : 어느 하나의 입력 조건 중 타당한값/그렇지 못한 값을 설정해서 해당 입력 자료에 맞는 결과를 확인
 - Cause-Effect Graphing Testing 원인-효과 그래프 검사 : 입력 데이터 간 관계와 출력에 영향을 미치는 상황을 체계적으로 분석 -> 효용 높은 테스트케이스를 선정해서 검사
 - Boundary Value Analysis 경계값 분석 : 입력 조건의 중간값보다 경계값에서 오류가 발생할 확률이 높기때문에 입력 조건의 경계값을 테스트 케이스로 선정해서 검사
 - Comparison Testing 비교 검사 : 여러 버전의 프로그램에 동일한 테스트 자료를 제공해서 동일한 결과가 출력되는지 테스트하는 기법

* 정렬(Sort)
 - 삽입 정렬(Inserion) : 가장 간단한 정렬. 이미 순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입시켜 정렬
 - 쉘 정렬(Shell) : 삽입 정렬을 확장한 개념. 입력 파일을 어떤 매개변수(h)의 값으로 서브파일을 구성, 각 서브파일을 삽입정렬 방식으로 순서배열하는 과정을 반복
 - 선택 정렬(Selection) : n개의 레코드 중 최소값을 찾아 첫번째 레코드 위치에 놓고, 나머지(n-1)개중 다시 최소값을 찾아 두번째 레코드 위치에 놓는 방식 반복
 - 버블 정렬(Bubble) : 주어진 파일에서 인접한 두개의 레코드 키 값을 비교하여 그 크기에 따라 레코드 위치를 서로 교환하는 방식
 - 퀵 정렬(Quick) : 레코드의 많은 자료 이동을 없애고 하나의 파일을 부분적으로 나누어가며 정렬. 키를 기준으로 작은 값은 왼쪽, 큰 값은 오른쪽 서브파일로 분해
 - 힙 정렬(Heap) : 전이진 트리(Complete)를 이용한 정렬 방식
 - 2-Way 합병 정렬(Merge) : 이미 정렬되어있는 두개의 파일을 한개의 파일로 합병하는 방식
 - 기수 정렬(Radix/Bucket) : Queue를 이용하여 자릿수(Digit)별로 정렬. 레코드의 키값을 분석해서 같은 수 or 같은 문자끼리 그 순서에 맞는 버킷에 분배, 버킷순서대로 정렬

* 자료 구성 단위
 - Bit 비트 : 자료표현의 최소 단위. 두가지상태(0/1)를 표시하는 2진수 1자리
 - Nibble 니블 : 4개의 bit가 모여 1개의 nibble을 구성. 16진수 1자리를 표현하기에 적절
 - Byte 바이트 : 문자를 표현하는 최소 단위. 8개의 bit가 모여 1byte 구성
 - Word 워드 : CPU가 한번에 처리할 수 있는 명령 단위
 - Field 필드 : 파일 구성의 최소 단위. 의미있는 정보를 표현하는 최소단위
 - Record 레코드 : 하나 이상의 관련된 필드가 모여서 구성됨
 - Block 블록 : 하나 이상의 논리 레코드가 모여서 구성됨 
 - File 파일 : 프로그램 구성의 기본 단위로, 여러 레코드가 모여서 구성됨
 - Database 데이터베이스 : 여러개의 관련된 파일의 집합

* 트랜잭션의 특징
 - Atomicity 원자성 : 연산은 db에 모두 반영되도록 commit되든지 rollback되어야됨
 - Consistency 일관성 : 트랜잭션이 성공적으로 완료하면 언제나 일관성있는 db상태로 변환
 - Isolation 독립성/격리성/순차성 : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중 다른 트랜잭션 연산이 끼어들 수 없음
 - Durability 영속성/지속성 : 성공적으로 완료된 트랜잭션 결과는 시스템이 고장나더라도 영구반영되어야함

* 정규화 과정(도부이결다조)
 - BCNF(Boyce-Codd 정규형) : 릴레이션 R에서 결정자가 모두 후보키인 정규형
 - 1NF(제1정규형) : 릴레이션에 속한 모든 도메인이 원자값(Atomic value)만으로 되어있는 정규형. 즉, 릴레이션 모든 속성 값이 원자 값으로만 되어있음
 - 2NF(제2정규형) : 릴레이션 R이 1NF이고, 기본키가 아닌 모든 속성이 기본키에 대하여 완전 함수적 종속을 만족하는 정규형
 - 3NF(제3정규형) : 릴레이션 R이 2NF고, 기본키가 아닌 모든 속성이 기본키에 대해 이행적 종속을 만족하지 않는 정규형
 - 4NF(제4정규형) : 릴레이션 R에 다치종속 A->B가 성립하는 경우 R의 모든 속성이 A에 함수적 종속 관계를 만족하는 정규형
 - 5NF(제5정규형, PJ/NF) : 릴레이션 R의 모든 조인 종속이 R의 후보키를 통해서만 성립되는 정규형

* 접근통제 : 데이터가 저장된 객체와 이를 사용하려는 주체 사이의 정보 흐름을 제한하는 것
 - 임의 접근통제(DAC: Discretionary Access Control) : 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여
 - 강제 접근통제(MAC: Mandatory Access Control) : 주체와 객체의 등급을 비교하여 접근 권한을 부여
 - 역할기반 접근통제(RBAC: Role Based Access Control) : 사용자의 역할에 따라 접근 권한 부여

* 카디널리티 : 1. 두 테이블 사이의 관계. 각각의 레코드가 어떻게 연결되는지를 설명
		    2. 튜플/행의 수. db테이블 내의 데이터값의 다양성 또는 고유 값(즉, 특정 컬럼에 대한 고유 값의 수) ex.남성/여성, 주민등록번호...

* 개체 무결성(Entity Integrity 실체무결성) : 기본테이블의 기본키를 구성하는 어떤 속성도 null값이나 중복값을 가질 수 없다는 규정
* 참조 무결성(Referential Integrity) : 외래키 값은 null이거나 참조 릴레이션의 기본키 값과 동일해야됨. 즉 릴레이션은 참조할 수 없는 외래키 가질수X

* OSI(Open System Interconnection) 참조 모델 : 다른 시스템 간 원활한 통신을 위해 ISO(국제표준화기구)에서 제안한 통신규약(protocol)
 - 하위계층(물리계층->데이터링크계층->네트워크계층) / 상위계층(전송계층->세션계층->표현계층->응용계층)
 - 물리계층(Physical Layer) : 전송에 필요한 두 장치간의 실제 접속과 절단 등을 기계적,전기적,기능적,절차적 특성에 대한 규칙을 정의
 - 데이터링크 계층(Data Link) : 두개의 인접한 개방 시스템들 간에 신뢰성있고 효율적인 정보 전송을 할수있도록함. 흐름제어,프레임동기화,오류제어,순서제어기능
 - 네트워크 계층(망계층) : 개방시스템들 간의 네트워크 연결을 관리하는 기능과 데이터 교환 및 중계기능. 경로설정(Routing), 트래픽제어, 패킷정보전송
 - 전송계층(Transport) : 종단시스템(end-to-end)간의 전송연결설정, 데이터전송, 연결해제기능. 주소설정, 다중화, 오류제어, 흐름제어 수행

* IPv4 -> IPv6으로 전환하는 전략
 - 듀얼 스택(Dual Stack) : 호스트에서 IPv4와 IPv6을 모두 처리할 수 있도록 두개의 스택을 구성하는 것
 - 터널링(Tunneling) : IPv6망에서 인접한 IPv4망을 거쳐 다른 IPv6망으로 통신할 때 IPv4망에 터널을 만들어 IPv6패킷이 통과할 수 있도록 함
 - IPv4/IPv6변환 : 헤더변환, 전송계층릴레이방식, 응용계층 게이트웨이 방식

* 스트림 암호화 방식
  암호 알고리즘의 개인키 암호화에 속해있음. 양방향 암호화 방식. 평문과 동일한 길이의 스트림을 생성하여 비트/바이트/위드 단위로 암호화.
  LFSR와 RC4가 있음
  ** HASH는 단방향 암호화 방식

* CPU 프로세스 스케줄링
 비선점(Non-Preemptive) 스케줄링 : 이미 할당된 CPU를 다른 프로세스가 강제로 빼앗아 사용할 수 없는 스케줄링 기법
						  FCFS, SJF, 우선순위, HRN, 기한부
 선점(Preemptive) 스케줄링 : 하나의 프로세스가 CPU를 할당받아 실행하고 있을 때 우선순위가 높은 다른 프로세스가 CPU를 강제로 빼앗아 사용할 수 있는 스케줄링 기법
						Round Robin, SRT, 선점 우선순위, MLQ(다단계 큐), MFQ(다단계 피드백 큐)
 - FCFS(First Come First Served, 선입 선출) : 준비상태 큐에 도착한 순서에 따라 차례로 CPU를 할당하는 기법
 - SJF(Shortest Job First, 단기 작업 우선) : 준비상태 큐에서 기다리고 있는 프로세스들 중에서 실행 시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법
 - HRN(Hightest Response-ratio Next) : (SJF 기법 보완)우선순위 계산 공식을 이용하여 실행 시간이 짧은 프로세스나 대기 시간이 긴 프로세스에게 우선순위를 주어 CPU를 할당한다.
		우선순위 계산식 = 대기시간 + 서비스시간 / 서비스시간
 - SRT(Shortest Remaining Time) : 현재 실행 중인 프로세스의 남은 시간과 대기 큐에 프로세스의 실행 시간이 가장 짧은 프로세스가 CPU를 사용

* 뷰
 장점 : 데이터 보안 용이, 논리적 독립성 제공, 사용자 데이터 관리 용이
 단점 : 뷰 자체 인덱스 불가, 뷰 정의 불가(DROP->CREATE), 삽입/삭제/갱신 연산 시 제약 존재

* IP address
 인터넷에 연결된 모든 컴퓨터 자원을 구분하기위한 고유 주소. 숫자로 8비트씩 4부분, 총 32비트로 구성됨
 - A Class : 국가나 대형 통신망에 사용(0~127로 시작)
 - B Class : 중대형 통신망에 사용(128~191로 시작)
 - C Class : 소규모 통신망에 사용(192~223으로 시작)
 - D Class : 멀티캐스트용으로 사용(224~239로 시작)
 - E Class : 실험적 주소이며 공용되지 않음

* 프로세스 상태 전이
 - 제출(submit) : 작업을 처리하기위해 사용자가 작업을 시스템에 제출한 상태
 - 접수(hold) : 제출된 작업이 스풀 공간인 디스크의 할당 위치에 저장된 상태
 - 준비(ready) : 프로세스가 프로세서를 할당받기위해 기다리고 있는 상태
 - 실행(run) : 준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태
 - 대기(wait), 블록(block) : 프로세스에 입출력처리가 필요하면 실행중인 프로세스가 중단되고 완료될때까지 대기
 - 종료(terminated, exit) : 프로세스 실행이 끝나고 프로세스 할당이 해제된 상태

* 프로세스 전이 관련 용어
 - dispatch : 준비상태에서 대기하고있는 프로세스 중 하나가 프로세서를 할당받아 실행 상태로 전이되는 과정
 - wake up : 입출력 작업이 완료되어 프로세스가 대기 상태에서 준비상태로 전이되는 과정
 - spooling : 입출력장치의 공유 및 상대적으로 느린 입출력장치의 처리속도를 보완하기위해 입출력 데이터를 직접 보내지 않고 나중에 한꺼번에 입출력하기위해 디스크에 저장하는 과정

* 시간구역성(Temporal Locality) : 프로세스가 실행되면서 하나의 페이지를 일정시간동안 집중적으로 액세스하는 현상
		한번 참조한 페이지는 가까운 시간 내에 계속 참조할 가능성이 높음을 의미함
		시간구역성이 이루어지는 기억장소 : Loop, stack, sub Routine(부 프로그램), counting(1씩 증감), totaling(집계)에 사용되는 변수(기억장소)

* MQTT(Message Queuing Telemetry Transport)
 TCP/IP기반 네트워크에서 동작하는 발행-구독 기반의 메시징 프로토콜로 최근 IoT환경에서 자주 사용됨

* COCOMO모델(COnstructive COst model)
 비용 예측 방법으로 B.Boehm이 제안.
 - Organic(단순형) - 5만라인 이하. 소규모 팀이 개발하는 응용 시스템
 - Semi-Detached(반분리형) - 30만라인 이하. 단순형과 임베디드의 중간으로 트랜잭션처리 시스템이나 운영체제, 데이터베이스 관리 시스템
 - Embedded(내장형) - 최대규모 하드웨어 포함 실시간 처리 시스템. 미사일유도, 신호기 제어시스템 등

* IT기술
 - AllJoyn(올조인) : 오픈소스기반 사물인터넷(IoT)플랫폼으로, 서로 다른 OS나 하드웨어를 사용하는 기기들이 표준화된 플랫폼을 이용함으로써 서로 통신/제어가 가능하게 됨
 - Wi-SUN(와이선) : 스마트그리드와 같은 장거리 무선통신을 필요로하는 사물인터넷서비스를 위한 저전력장거리(LPWA:Low-Power Wide Area)통신기술
 - NFC(Near Field Communication) : 고주파(HF)를 이용한 근거리무선통신기술로, 아주 가까운거리에서 양방향통신을 지원하는 RFID기술의 일종
 - Mesh Network : 차세대 이동통신, 홈네트워킹, 공공안전 등 특수목적을 위한 네트워크

* LAN의 매체 접근 제어 방식
 - CSMA/CD : 버스 또는 트리 토폴로지에서 가장 많이 사용됨. 전송하고자하는 스테이션이 전송매체의 상태를 감지하다가 유휴(idle)상태인 경우 데이터를 전송, 전송 이후 계속 감지하다가 다른 스테이션과의 충돌 발생 여부 감시

* TCP Wrapper : 외부 컴퓨터의 접속 인가 여부를 점검해서 접속을 허용 및 거부하는 보안용 도구. 네트워크 접속 시 로그인한 다른 컴퓨터 사용자 id&로그 조회를 방지하기위한 방화벽 역할

* DoS공격(Denial of Service)의 종류
 1. Ping Of Death : 대량의 Ping을 전송해 네트워크를 마비시킴
 2. Land Attack : Packet의 보내는 사람과 받는 사람들 모두 Server로 설정
 3. SYN Flooding : 접속을 요청하는 SYN Packet을 대량으로 전송해 네트워크를 마비 시킴
 4. Smurf : IP/ICMP의 특성을 악용해 특정 사이트에 집중적으로 데이터를 보내 네트워크 또는 시스템 상태를 불능으로 만듬

* DDoS (Distrubuted Denial of Service)
 DoS 공격의 업그레이드 형태
 - 인터넷 상에서 다수의 시스템이 협력하여 하나의 표적 시스템을 공격함으로써 서비스 중단을 일으킴
 - 공격자(Master)는 DDoS 공격에 사용되는 Agent들에 대한 제어권한을 획득하여 공격 명령을 내림
 - N vs 1 공격방식
 대응방법 - 취약점 보안 패치 / 네트워크 트래픽에 대한 지속적인 점검 및 분석

* 객체지향 설계 원칙(다섯글자 원칙 앞글자를 따 SOLID원칙이라고도 함)
 - SRP(Single Responsibility Principle) 단일 책임 원칙 : 객체는 단 하나의 책임만. 응집도는 높이고 결합도는 낮게 설계
 - OCP(Open-Closed Principle) 개방-폐쇄 원칙 : 기존 코드 변경없이 기능 추가해야할수있도록 설계해야함. 공통 인터페이스를 하나의 인터페이스로 묶어 캡슐화하는 방법이 대표적
 - LSP(Liskov Substitution Principle) 리스코프 치환 원칙 : 자식클래스는 최소한 부모클래스에서 가능한 행위는 수행할수있어야함
 - ISP(Interface Segregation Principle) 인터페이스 분리 원칙 : 자신이 사용하지 않는 인터페이스와 의존관계를 맺거나 영향을 받지 않아야함
 - DIP(Dependency Inversion Principle) 의존 역전 원칙 : 각 객체들의 의존 관계 성립 시 추상성이 낮은 클래스보다 추상성이 높은 클래스와 의존 관계를 맺어야함

* 결합도(약한것부터 강한순서)
 1. 자료 결합도 (Data Coupling) : 모듈 간의 인터페이스로 전달되는 데이터만으로 상호작용하는 경우, 결합도가 가장 낮고 이상적인 형태.
 2. 스탬프 결합도 (Stamp Coupling) : 모듈 간의 인터페이스로 배열이나 객체, 자료 구조 등이 전달되는 경우.
 3. 제어 결합도 (Control Coupling) : 한 모듈이 다른 모듈의 논리 흐름을 제어하는 제어 요소를 전달하는 경우.
 4. 외부 결합도 (External Coupling) : 한 모듈이 외부 시스템이나 모듈의 데이터나 통신 프로토콜을 참조하는 경우.
 5. 공통 결합도 (Common Coupling) : 여러 모듈이 하나의 공통 데이터 영역(전역 변수)을 공유하고 참조하는 경우.
 6. 내용 결합도 (Content Coupling) : 한 모듈이 다른 모듈의 변수나 기능 내부를 직접 참조하는 경우, 결합도가 가장 높고 이상적이지 않은 형태.

* 응집도(강한것부터 약한순서)
 1. 기능적 응집도 (Functional Cohesion) : 모듈 내부의 모든 기능이 단일 목적을 위해 수행되는 경우, 응집도가 가장 높고 이상적인 형태.
 2. 순차적 응집도 (Sequential Cohesion) : 모듈 내에서 한 활동의 출력값이 다른 활동에서 사용되는 경우.
 3. 교환적 응집도 (Communication Cohesion) : 동일한 입력과 출력을 사용해 다른 기능을 수행하는 활동들이 모여 있는 경우.
 4. 절차적 응집도 (Procedural Cohesion) : 모듈이 여러 관련 기능을 가질 때, 그 기능들이 순차적으로 수행되는 경우.
 5. 시간적 응집도 (Temporal Cohesion) : 특정 시간에 처리되어야 하는 활동들이 한 모듈에서 처리되는 경우.
 6. 논리적 응집도 (Logical Cohesion) : 유사한 성격이나 특정 형태로 분류되는 처리 요소들이 한 모듈에서 처리되는 경우.
 7. 우연적 응집도 (Coincidental Cohesion) : 모듈 내부의 구성 요소들이 서로 연관이 없을 경우, 응집도가 가장 낮고 이상적이지 않은 형태.

* EAI(Enterprise Architecture Integration)
 기업 애플리테이션 통합. 각종 애플리케이션 간에 상호 연동이 가능하도록 통합하는 솔루션
 - Point-to-Point : 가장 기본적인 방법으로, 애플리케이션을 1:1로 연결해서 변경 및 재사용이 어려움
 - Hub & Spoke : 단일 접점인 허브시스템을 통해 데이터를 전송하는 중앙집중형 방식. 확장 및 유지보수에 좋으나 허브 장애 발생 시 전체에 영향
 - Message Bus(ESB방식) : 애플리케이션 사이에 미들웨어를 두어 처리하는 방식. 확장성이 뛰어나고 대용량처리가 가능
 - Hybrid : Hub&Spoke, Message Bus의 혼합방식. 그룹내에서는 허브, 그룹간에는 메시지버스 방식 사용

* 퀵 정렬
 분할 정복(Divide and Conquer)에 기반한 알고리즘으로 피봇을 사용하며 최악의경우 n(n-1)/2회의 비교 수행.
 키를 기준으로 작은 값은 왼쪽, 큰 값은 오른쪽 서브파일로 분해시키는 방식으로 정렬. 정렬방식 중 제일 빠름
 평균 수행시간 복잡도는 O(nlog2n)이고 최악의 수행시간복잡도는 O(n2)

* 테이스케이스 생성도구
 - 자료 흐름도 : 자료 원시 프로그램을 입력받아 파싱한 후 자료 흐름도를 작성
 - 기능 테스트 : 주어진 기능을 구동시키는 모든 가능한 상태를 파악하여 이에 대한 입력을 작성
 - 입력 도메인 분석 : 원시코드의 내부를 참조하지 않고, 입력 변수의 도메인을 분석하여 테스트데이터를 작성
 - 랜덤 테스트 : 입력 값을 무작위로 추출하여 테스트

* 테스트
 - 화이트박스 테스트 : 모듈의 원시코드를 오픈시킨 상태에서 논리적인 모든 경로를 테스트해서 테스트케이스를 설계.
	모듈 안의 작동을 직접 관찰. 원시코드의 모든 문장을 한번 이상 실행. 설계된 절차에 초점을 둔 구조적 테스트
	종류 - 기초경로검사, 제어구조검사(조건검사, 루프검사, 데이트흐름검사 등)
 - 블랙박스 테스트 : 소프트웨어가 수행할 특정 기능을 알기 위해 각 기능이 완전히 작동되는것을 입증하는 테스트(기능테스트)
	프로그램의 구조를 고려하지 않아서 테스트케이스는 프로그램 또는 모듈의 요구나 명세를 기초로 작성됨
	소프트웨어 인터페이스에서 실시되는 테스트. 테스트과정의 후반부에 적용됨
	종류 - 동치분할검사, 경계값분석, 원인-효과 그래프검사, 오류예측검사, 비교검사 등

* 테스트
 - 테스트 시나리오 : 테스트케이스를 적용하는 순서에 따라 여러개의 테스트케이스를 묶은 집합. 테스트케이스를 적용하는 구체적인 절차를 명세한 문서
 - 테스트 케이스 : 구현된 소프트웨어가 요구사항을 정확하게 준수했는지 확인하기위해 설계된 입력값, 실행조건 등으로 구성된 테스트항목에 대한 명세서
 - 테스트 데이터 : 시스템의 기능이나 적합성 등을 테스트하기 위해 만들어진 데이터 집합. 

* 방향그래프 정점 계산
 최대 간선 수 계산 : n(n-1) (n은 정점 수)

* 제어흐름도의 cyclomatic(순환복잡도) 수 계산
 - 방법1 : 영역 수 계산. 내부영역(ex.1,2,3) + 외부영역(ex.1) = 4
 - 방법2 : V(G) = E - N + 2(E는 화살표 수, N은 노드 수)

* 기호
 - ∀ : 가능한 모든 튜플에 대하여
 - ∃ : 하나라도 일치하는 튜플이 있음(There exists)
 - ¬ : NOT 연산. 식에 대한 부정
 - ∨ : OR 연산. 두 식을 또는 이라는 관계로 연결
 - ∧ : AND 연산. 두 식을 그리고 라는 관계로 연결


 
 
--------------------------------------------------------------------------------------------------------------------------------------

* 소프트웨어 개발 방법론 [구정객컴애제]		소프트웨어의 개발 시작부터 전 개발 과정을 형상화환 방법론
	구조적 방법론	전체 시스템을 나눠 개발하고 통합하는 분할-정복 방식의 방법론 / 나씨-슈나이더만 차트 사용
	정보공학 방법론	정보 시스템 개발에 필요한 절차를 체계화한 방법론 
	객체지향 방법론	객체라는 단위로 시스템을 설계하는 방법론
	컴포넌트 기반 방법론	컴포넌트를 조립해 작성하는 방법론
	애자일 방법론(Agile Model)	"절차보다 사람이 중심이 되어 변화에 유연하고 신속하게 효율적으로 개발 할 수 있는 신속 적응적 경량 개발 방법론
                                워터폴에 대비되는 방법론으로 최근 회사에서 각광받는 방법론 / 종류 :  XP(eXtreme Programming), 스크럼(Scrum), 칸반(Kanban), 크리스탈(Crystal), 린(LEAN)"
	제품 계열 방법론	제품에 적용할 공통 기능을 정의하여 개발하는 방법론 (임베디드 소프트웨어 작성에 유용)

* XP의 12가지 기본원리		
	짝 프로그래밍 (Pair Programming)	다른 사람과 페어로 개발하여 공동 책임을 지님
	공동 코드 소유 (Collective Ownership)	시스템에 있는 코드는 누구나 언제든 수정 가능
	지속적인 통합 (CI; Continuos Integration)	여러 번 소프트웨어를 통합하고 빌드해야 함
	계획 세우기 (Planning Process)	고객이 원하는 가치를 정의하고, 개발에 필요한 건 무엇이며, 어떤 곳에서 지연이 될 수 있는지 알려줘야 함
	작은 릴리즈 (Small Release) 	작은 시스템을 먼저 만들고, 짧은 단위로 업데이트
	메타포어 (Metaphor)	공통 이름 체계를 통해 의사소통을 원활히
	간단한 디자인 (Simple Design)	요구사항에 적합한 단순한 시스템을 설계
	테스트 기반 개발 (TDD; Test Drive Develop) 	테스트를 먼저 수행하고, 통과할 수 있는 코드를 작성
	리팩토링 (Refactoring) 	기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 코드를 재구성
	40시간 작업 (40-Hour Work)	피곤으로 인한 실수가 없도록 주 40시간만 일하자
	고객 상주 (On Site Customer)	개발자들의 질문에 즉각 대답해줄 수 있는 고객이 풀타임 상주해야 함
	코드 표준 (Coding Standard)	코딩 표준을 두고 효과적으로 개발

* 생성패턴 (Creational)     [생 빌프로 팩앱싱] or [생싱추백 빌프]		
	빌더(Builder)	작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성 , 객체의 생성 과정과 표현 방법을 분리 → 동일 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음
	프로토타입(Prototype)	원본 객체를 복제하는 방법으로 객체를 생성
	팩토리메서드(Factory Method)	생성할 객체의 클래스를 국한하지 않고 객체를 생성, 상위 클래스에서 인터페이스만 정의, 실제 생성은 서브 클래스가 담당
	추상팩토리(Abstract Factory)	인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현, 연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능
	싱글톤(Singleton)	전역 변수 사용x, 한 클래스에 한 객체만 존재, 생성된 객체는 어디서든지 참조 가능, 여러 프로세스가 동시에 참조할 수는 없음

* 네트워크 7단계
1. 물리 계층 (Physical Layer)
   - 실제 장비, 회선과 관련된 특성 규정 (물리적 연결)
   - 물리적인 데이터 전송 경로를 제공하며, 전기 신호, 빛 등으로 데이터를 전송
   - 예: RS-232C, V.35, Ethernet, FDDI

2. 데이터 링크 계층 (Data Link Layer)
   - LAN 내부 같은 네트워크에 있는 여러 대 컴퓨터 데이터 교환
   - 프레이밍이 일어남
   - 전송단위: 프레임
   - 물리 계층으로부터 전송된 데이터의 오류를 검출하고 수정하며, 데이터 전송을 위한 물리적 주소(MAC) 지정
   - 예: Ethernet, Token Ring, FDDI, HDLC

3. 네트워크 계층 (Network Layer)
   - 패킷을 목적지까지 전달하고, 경로 선택 및 데이터 전송을 위한 논리적 주소 지정
   - 네트워크에서 목적지로 데이터 전송을 위해 IP주소를 이용해 최적의 경로를 찾고 (routing), 다음 라우터에 데이터를 넘겨줌 (forwarding)
   - 예: IP, ICMP, ARP, RARP

4. 전송 계층 (Transport Layer)
   - 포트번호를 관리하여 수신된 데이터가 어느 응용프로그램에 전송될지 판독, 데이터 전송
   - 전송 사용 프로토콜 결정 (TCP or UDP)
   - 신뢰성 있는 통신 서비스를 제공하며, 패킷 분할 및 재조립, 오류 검출 및 복구
   - 예: TCP, UDP

5. 세션 계층 (Session Layer)
   - 통신을 위한 세션 관리, 연결 설정 및 해제, 동기화
   - 송신 시: 데이터 복구를 위한 동기점(대동기점, 소동기점) 생성
   - 수신 시: 동기점 확인
   - 예: NetBIOS, RPC, NFS

6. 표현 계층 (Presentation Layer)
   - 데이터 표현과 변환을 담당하여 데이터를 응용 계층으로 전달
   - 응용 계층으로부터 받은 데이터를 수신 측에 맞는 코드/형식으로 변환하거나 반대의 과정 수행
   - 필요 시 암호화 (반대의 경우 복호화) 진행
   - 예: JPEG, MPEG, SSL, TLS

7. 응용 계층 (Application Layer)
   - 사용자와 직접 상호작용하는 소프트웨어를 지원
   - 사용자(응용 프로그램)를 OSI 환경에 접속시킴
   - 예: HTTP, FTP, SMTP, DNS, Telnet, SSH
